ASCII    8位2进制  128
unicode  4位16进制 65536
utf-8    8位2进制  1字节--4字节  0 / 110 / 10



1. <script>: 脚本的获取和执行是同步的。此过程中页面被阻塞，停止解析。
2. <script defer="defer">：脚本的获取是异步的，执行是同步的。脚本加载不阻塞页面的解析，脚本在获取完后并不立即执行，而是等到DOMready之后才开始执行。
3. <script async="async">: 脚本的获取是异步的，执行是同步的。但是和<script defer="defer">的不同点在于脚本获取后会立刻执行，这就会造成脚本的执行顺序和页面上脚本的排放顺序不一致，可能造成脚本依赖的问题。
4. onload 页面所有资源加载完毕 -- 是等到 head 和 body 资源加载执行后

*. 浏览器遇到 <script>且没有defer或async属性的 标签时，会触发先页面一次渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。




1.  <link> 不阻塞DOM TREE解析
1.1 <link> 加载style 全场独步 开场即请求
1.2 <script> 阻塞 DOM 解析
1.3 <script> 执行前有 <link> 正在加载 会等所有 <link> 加载完成在执行
1.4 <script defer> 会在 <script> 所有执行完之后执行
1.5 单独一个<script>和多个<script>以及位置 是否带 defer 影响都不一样 如: <script>--body尾部 对 <script>--head 有影响

2.  <link>--head 类似资源 加载完成 再执行整个body render渲染 (body头部类似不一样)
2.1 <link>--body TREE解析 只是后面的<DIV>要等到<link>加载完再显示处理 不是阻塞DOM解析 是[边加载|边渲染|边改变]过程

3.  <link> 在 <script> 前 会加载 css 完成再执行
3.1 <link> 在 <script> 后 一点影响没有

4.  <link>--head 任何位置 都对 <script defer> 都没有影响
4.1 <link>--body 任何位置 都对 <script defer> 都有影响


---- 原文: https://juejin.im/post/59c60691518825396f4f71a1
---- 作者小结
1.  CSS 不会阻塞 DOM 的解析，但会阻塞 DOM 渲染。
（me: 在头部才会阻塞渲染,body里面不会）
2.  JS 阻塞 DOM 解析，但浏览器会"偷看"DOM，预先下载相关资源。

3.  浏览器遇到 <script>且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。
!.  所以，你现在明白为何<script>最好放底部，<link>最好放头部，
4.  <script>最好放底部，<link>最好放头部，如果头部同时有<script>与<link>的情况下，最好将<script>放在<link>上面。

